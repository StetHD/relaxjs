{"version":3,"sources":["routing.ts"],"names":[],"mappings":"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","file":"routing.js","sourcesContent":["/*\r\n * relaxjs route utility class\r\n * by Michele Ursino - 2015, 2016\r\n */\r\n\r\n/// <reference path='./relaxjs.ts' />\r\n\r\nimport * as http from 'http';\r\nimport * as url from 'url';\r\nimport * as path from 'path';\r\nimport * as _ from 'lodash';\r\n\r\nimport * as relaxjs from './relaxjs';\r\n\r\n/**\r\n * Route: helper class to routing requests to the correct resource\r\n * @export\r\n * @class Route\r\n */\r\nexport class Route {\r\n\r\n  /**\r\n   * Request HTTP verb\r\n   *\r\n   * @type {string}\r\n   */\r\n  verb : string;\r\n  /**\r\n   * if true it means this route is mapping to a file\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  static : boolean = true;\r\n  /**\r\n   * path of the request as received\r\n   *\r\n   * @type {string}\r\n   */\r\n  pathname : string;\r\n  /**\r\n   * Path of the request split in its components\r\n   *\r\n   * @type {string[]}\r\n   */\r\n  path : string[];\r\n  /**\r\n   * Query data associated with this request.\r\n   * It is a collection of name: value\r\n   *\r\n   * @type {*}\r\n   */\r\n  query : any;\r\n  /**\r\n   * Mime type of the expeted response\r\n   *\r\n   * @type {string}\r\n   */\r\n  outFormat : string;\r\n  /**\r\n   * mime type of the incomed request\r\n   *\r\n   * @type {string}\r\n   */\r\n  inFormat : string;\r\n  /**\r\n   * Cookies associated with the request\r\n   *\r\n   * @type {string[]}\r\n   */\r\n  cookies : string[]; // Unparsed cookies received withing the request.\r\n  /**\r\n   * Original HTTP Request\r\n   *\r\n   * @type {http.ServerRequest}\r\n   */\r\n  request : http.ServerRequest;\r\n  /**\r\n   * Original HTTP response object\r\n   *\r\n   * @type {http.ServerResponse}\r\n   */\r\n  response : http.ServerResponse;\r\n  /**\r\n   * Headers associated with the request\r\n   * @internal\r\n   * @type {relaxjs.ResponseHeaders}\r\n   */\r\n  headers : relaxjs.ResponseHeaders = {}; // Additional headers filters or resources may set before returning an answer.\r\n\r\n  /**\r\n   * Creates an instance of Route.\r\n   * @internal\r\n   * @param {string} [uri] (description)\r\n   * @param {string} [outFormat] (description)\r\n   * @param {string} [inFormat] (description)\r\n   */\r\n  constructor( uri? : string, outFormat? : string, inFormat? : string ) {\r\n    if ( uri ) {\r\n      const parsedUrl : url.Url = url.parse( uri, true );\r\n      const extension = path.extname( parsedUrl.pathname );\r\n      let resources : string[] = parsedUrl.pathname.split('/');\r\n      if ( parsedUrl.pathname.charAt(0) === '/' ) {\r\n        resources.unshift('site');\r\n      }\r\n      resources = _.map(resources, ( item : string ) => decodeURI(item) );\r\n\r\n      this.pathname = parsedUrl.pathname;\r\n      this.query = parsedUrl.query;\r\n      this.path = _.filter( resources, ( res : string ) => res.length > 0 );\r\n      this.static = ( extension.length > 0 );\r\n      this.outFormat = outFormat ? outFormat : 'application/json';\r\n      this.inFormat = inFormat ? inFormat : 'application/json';\r\n    }\r\n  }\r\n\r\n  //\r\n  /**\r\n   * Create a new Route with a new path without the first item\r\n   * @internal\r\n   * @param {number} stpes (description)\r\n   * @returns {Route} (description)\r\n   */\r\n  stepThrough( stpes : number ) : Route {\r\n    const newRoute : Route = new Route();\r\n    _.assign( newRoute, {\r\n      verb : this.verb,\r\n      static : this.static,\r\n      pathname: this.pathname,\r\n      path: [],\r\n      query: this.query,\r\n      outFormat: this.outFormat,\r\n      inFormat: this.inFormat,\r\n      cookies: this.cookies,\r\n      request: this.request,\r\n      response: this.response\r\n    });\r\n    newRoute.path = _.map( this.path, v => _.clone(v) );\r\n    newRoute.path.splice( 0, stpes );\r\n    return newRoute;\r\n  }\r\n\r\n  /**\r\n   * (description)\r\n   * @internal\r\n   * @returns {string} (description)\r\n   */\r\n  getNextStep() : string {\r\n    // console.log('[Route.nextStep] '+this.path[0] );\r\n    return this.path[0];\r\n  }\r\n\r\n  /**\r\n   * Add new headers to this route\r\n   * @internal\r\n   * @param {relaxjs.ResponseHeaders} h (description)\r\n   */\r\n  addResponseHeaders( h: relaxjs.ResponseHeaders ) {\r\n    _.merge(this.headers,h);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Create a Route from a request, response couple. For example:\r\n *  GET /home/users?id=100  becomes home.users.get(100)\r\n *  PUT /home/users?id=100  becomes home.users.put(100, data)\r\n * @internal\r\n * @export\r\n * @param {http.ServerRequest} request (description)\r\n * @param {http.ServerResponse} response (description)\r\n * @returns {Route} (description)\r\n */\r\nexport function fromRequestResponse( request: http.ServerRequest, response: http.ServerResponse ) : Route {\r\n  if ( !request.url ) {\r\n    request.url = '/';\r\n  }\r\n  const route = new Route( request.url );\r\n\r\n  route.request = request;\r\n  route.response = response;\r\n\r\n  // Extract the cookies (if any) from the request\r\n  if ( request.headers.cookie ) {\r\n    route.cookies = request.headers.cookie.split(';');\r\n  }\r\n\r\n  // This is the format the request would like to have back\r\n  if ( request.headers['accept'] ) {\r\n    route.outFormat = request.headers['accept'];\r\n  }\r\n  // This is the format the requester is sending its data with\r\n  if ( request.headers['content-type'] ) {\r\n    route.inFormat = request.headers['content-type'];\r\n  }\r\n\r\n  if ( !request.headers['accept'] && request.headers['content-type'] ) {\r\n    route.outFormat = request.headers['content-type'];\r\n  }\r\n  if ( request.headers['accept'] && !request.headers['content-type'] ) {\r\n    route.inFormat = request.headers['accept'];\r\n  }\r\n  if ( !request.headers['accept'] && !request.headers['content-type'] ) {\r\n    route.inFormat = 'application/json';\r\n    route.outFormat = 'application/json';\r\n  }\r\n\r\n  route.verb = request.method;\r\n  return route;\r\n}\r\n"],"sourceRoot":"/source/"}